
class ColorpickerMenu : Menu native
{
	native float mRed;
	native float mGreen;
	native float mBlue;

	native int mGridPosX;
	native int mGridPosY;

	native int mStartItem;

	native CVar mCVar;
	
	//=============================================================================
	//
	//
	//
	//=============================================================================

	override bool MenuEvent (int mkey, bool fromcontroller)
	{
		switch (mkey)
		{
		case MKEY_Down:
			if (mDesc.mSelectedItem == mStartItem+6)	// last valid item
			{
				MenuSound ("menu/cursor");
				mGridPosY = 0;
				// let it point to the last static item so that the super class code still has a valid item
				mDesc.mSelectedItem = mStartItem+7;	
				return true;
			}
			else if (mDesc.mSelectedItem == mStartItem+7)
			{
				if (mGridPosY < 15)
				{
					MenuSound ("menu/cursor");
					mGridPosY++;
				}
				return true;
			}
			break;

		case MKEY_Up:
			if (mDesc.mSelectedItem == mStartItem+7)
			{
				if (mGridPosY > 0)
				{
					MenuSound ("menu/cursor");
					mGridPosY--;
				}
				else
				{
					MenuSound ("menu/cursor");
					mDesc.mSelectedItem = mStartItem+6;
				}
				return true;
			}
			break;

		case MKEY_Left:
			if (mDesc.mSelectedItem == mStartItem+7)
			{
				MenuSound ("menu/cursor");
				if (--mGridPosX < 0) mGridPosX = 15;
				return true;
			}
			break;

		case MKEY_Right:
			if (mDesc.mSelectedItem == mStartItem+7)
			{
				MenuSound ("menu/cursor");
				if (++mGridPosX > 15) mGridPosX = 0;
				return true;
			}
			break;

		case MKEY_Enter:
			if (mDesc.mSelectedItem == mStartItem+7)
			{
				// Choose selected palette entry
				int index = mGridPosX + mGridPosY * 16;
				color col = Screen.PaletteColor(index);
				mRed = col.r;
				mGreen = col.g;
				mBlue = col.b;
				MenuSound ("menu/choose");
				return true;
			}
			break;
		}
		if (mDesc.mSelectedItem >= 0 && mDesc.mSelectedItem < mStartItem+7) 
		{
			if (mDesc.mItems[mDesc.mSelectedItem].MenuEvent(mkey, fromcontroller)) return true;
		}
		return Super.MenuEvent(mkey, fromcontroller);
	}

	
}