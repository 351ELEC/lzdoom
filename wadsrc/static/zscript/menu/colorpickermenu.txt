
class ColorpickerMenu : Menu native
{
	native float mRed;
	native float mGreen;
	native float mBlue;

	native int mGridPosX;
	native int mGridPosY;

	native int mStartItem;

	native CVar mCVar;
	
	//=============================================================================
	//
	//
	//
	//=============================================================================

	override bool MenuEvent (int mkey, bool fromcontroller)
	{
		switch (mkey)
		{
		case MKEY_Down:
			if (mDesc.mSelectedItem == mStartItem+6)	// last valid item
			{
				MenuSound ("menu/cursor");
				mGridPosY = 0;
				// let it point to the last static item so that the super class code still has a valid item
				mDesc.mSelectedItem = mStartItem+7;	
				return true;
			}
			else if (mDesc.mSelectedItem == mStartItem+7)
			{
				if (mGridPosY < 15)
				{
					MenuSound ("menu/cursor");
					mGridPosY++;
				}
				return true;
			}
			break;

		case MKEY_Up:
			if (mDesc.mSelectedItem == mStartItem+7)
			{
				if (mGridPosY > 0)
				{
					MenuSound ("menu/cursor");
					mGridPosY--;
				}
				else
				{
					MenuSound ("menu/cursor");
					mDesc.mSelectedItem = mStartItem+6;
				}
				return true;
			}
			break;

		case MKEY_Left:
			if (mDesc.mSelectedItem == mStartItem+7)
			{
				MenuSound ("menu/cursor");
				if (--mGridPosX < 0) mGridPosX = 15;
				return true;
			}
			break;

		case MKEY_Right:
			if (mDesc.mSelectedItem == mStartItem+7)
			{
				MenuSound ("menu/cursor");
				if (++mGridPosX > 15) mGridPosX = 0;
				return true;
			}
			break;

		case MKEY_Enter:
			if (mDesc.mSelectedItem == mStartItem+7)
			{
				// Choose selected palette entry
				int index = mGridPosX + mGridPosY * 16;
				color col = Screen.PaletteColor(index);
				mRed = col.r;
				mGreen = col.g;
				mBlue = col.b;
				MenuSound ("menu/choose");
				return true;
			}
			break;
		}
		if (mDesc.mSelectedItem >= 0 && mDesc.mSelectedItem < mStartItem+7) 
		{
			if (mDesc.mItems[mDesc.mSelectedItem].MenuEvent(mkey, fromcontroller)) return true;
		}
		return Super.MenuEvent(mkey, fromcontroller);
	}

	//=============================================================================
	//
	//
	//
	//=============================================================================

	override bool MouseEvent(int type, int mx, int my)
	{
		int olditem = mDesc.mSelectedItem;
		bool res = Super.MouseEvent(type, mx, my);

		if (mDesc.mSelectedItem == -1 || mDesc.mSelectedItem == mStartItem+7)
		{
			int y = (-mDesc.mPosition + BigFont.GetHeight() + mDesc.mItems.Size() * OptionMenuSettings.mLinespacing) * CleanYfac_1;
			int h = (screen.GetHeight() - y) / 16;
			int fh = OptionMenuSettings.mLinespacing * CleanYfac_1;
			int w = fh;
			int yy = y + 2 * CleanYfac_1;
			int indent = (screen.GetWidth() / 2);

			if (h > fh) h = fh;
			else if (h < 4) return res;	// no space to draw it.

			int box_y = y - 2 * CleanYfac_1;
			int box_x = indent - 16*w;

			if (mx >= box_x && mx < box_x + 16*w && my >= box_y && my < box_y + 16*h)
			{
				int cell_x = (mx - box_x) / w;
				int cell_y = (my - box_y) / h;

				if (olditem != mStartItem+7 || cell_x != mGridPosX || cell_y != mGridPosY)
				{
					mGridPosX = cell_x;
					mGridPosY = cell_y;
					//S_Sound (CHAN_VOICE | CHAN_UI, "menu/cursor", snd_menuvolume, ATTN_NONE);
				}
				mDesc.mSelectedItem = mStartItem+7;
				if (type == MOUSE_Release)
				{
					MenuEvent(MKEY_Enter, true);
					if (m_use_mouse == 2) mDesc.mSelectedItem = -1;
				}
				res = true;
			}
		}
		return res;
	}

	
}